from aiogram.types import (InlineKeyboardMarkup,
                           InlineKeyboardButton,
                           ReplyKeyboardMarkup,
                           KeyboardButton)

from aiogram.utils.keyboard import InlineKeyboardBuilder
import urllib.parse


geoposition = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π üåè', request_location=True)]
    ],
    resize_keyboard=True
)


update_geoposition = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üìç –û–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é üåè', request_location=True)]
    ],
    resize_keyboard=True
)


main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîé –ò—Å–∫–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã")],
        [KeyboardButton(text="üß≠ –ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã")],
        [KeyboardButton(text="üåê –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞"),
        KeyboardButton(text="üë®‚Äçüë©‚Äçüë¶‚Äçüë¶ –ù–∞—Å–µ–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="üìç –û–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)]
    ],
    resize_keyboard=True
)


# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
def generate_cities_keyboard_with_status(cities, page=1, items_per_page=10, build_location=''):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–æ–≤.
    :param cities: —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    :param page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param items_per_page: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    :return: –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    current_cities = cities[start_idx:end_idx]
    buttons = []
    for city in current_cities:
        city_id = city[0]
        city_name = city[1]
        city_distance = city[5]  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≥–æ—Ä–æ–¥–∞
        is_visited = city[6]
        is_bookmarked = city[7]
        '''
        is_hidden = False
        try:
            is_hidden = city[8]
        except:
            pass
        '''
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å —É—á—ë—Ç–æ–º —Å—Ç–∞—Ç—É—Å–æ–≤
        status = ""
        if is_visited:
            status += "‚úÖ "
        if is_bookmarked:
            status += "üìå "
        '''    
        if is_hidden:
            status += "üö´ "
        '''
        button_text = f"{status}{city_name} ({city_distance:.1f} –∫–º)"
        callback_data = f"city_{city_id}_page_{page}"
        buttons.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
    if not buttons:
        raise ValueError("–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—É—Å—Ç.")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    inline_keyboard = [[button] for button in buttons]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
    if end_idx < len(cities):
        pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"page_{page + 1}"))
    if build_location == 'my_routes':
        pagination_buttons.append(InlineKeyboardButton(text="‚Ü©Ô∏è –ö –º–æ–∏–º –º–∞—Ä—à—Ä—É—Ç–∞–º", callback_data="back_to_my_routes"))
    if pagination_buttons:
        inline_keyboard.append(pagination_buttons)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


# –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤
def back_to_cities_list(latitude, longitude, city_status, return_callback="return_to_list", current_section=""):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–æ—Ä–æ–¥–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
    :param latitude: –®–∏—Ä–æ—Ç–∞ –≥–æ—Ä–æ–¥–∞
    :param longitude: –î–æ–ª–≥–æ—Ç–∞ –≥–æ—Ä–æ–¥–∞
    :param city_status: –°—Ç–∞—Ç—É—Å –≥–æ—Ä–æ–¥–∞ {'visited': bool, 'bookmarked': bool, 'hidden': bool}
    :param return_callback: Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    :return: InlineKeyboardMarkup
    """

    if current_section == 'visited':

        if not city_status.get("visited"):
            keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üöò –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö",
                    url=f"https://yandex.ru/maps/?rtext=~{latitude},{longitude}&rtt=auto"
                )],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤", callback_data=return_callback)]
            ]
        )
        else:

            text = f"–ü–æ—Å–º–æ—Ç—Ä–∏ –º–∞—Ä—à—Ä—É—Ç: https://yandex.ru/maps/?rtext=~{latitude},{longitude}&rtt=auto"
            encoded_text = urllib.parse.quote(text, safe='')

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üöò –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö",
                        url=f"https://yandex.ru/maps/?rtext=~{latitude},{longitude}&rtt=auto"
                    )],
                    [InlineKeyboardButton(
                        text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                        url=f"tg://resolve?domain=share&text={encoded_text}"
                    )],
                    [InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –∏–∑ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö', callback_data='to_visited')],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤", callback_data=return_callback)]
                ]
            )


    elif current_section == 'bookmarked':

        text = f"–ü–æ—Å–º–æ—Ç—Ä–∏ –º–∞—Ä—à—Ä—É—Ç: https://yandex.ru/maps/?rtext=~{latitude},{longitude}&rtt=auto"
        encoded_text = urllib.parse.quote(text, safe='')

        if not city_status.get("bookmarked"):            

            keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üöò –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö",
                    url=f"https://yandex.ru/maps/?rtext=~{latitude},{longitude}&rtt=auto"
                )],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤", callback_data=return_callback)]
            ]
        )
        else:
        
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üöò –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö",
                        url=f"https://yandex.ru/maps/?rtext=~{latitude},{longitude}&rtt=auto"
                    )],
                    [InlineKeyboardButton(
                        text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                        url=f"tg://resolve?domain=share&text={encoded_text}"
                    )],
                    [InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –∏–∑ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö', callback_data='to_bookmarks')],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤", callback_data=return_callback)]
                ]
            )

    else:

        text = f"–ü–æ—Å–º–æ—Ç—Ä–∏ –º–∞—Ä—à—Ä—É—Ç: https://yandex.ru/maps/?rtext=~{latitude},{longitude}&rtt=auto"
        encoded_text = urllib.parse.quote(text, safe='')

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üöò –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö",
                    url=f"https://yandex.ru/maps/?rtext=~{latitude},{longitude}&rtt=auto"
                )],
                [InlineKeyboardButton(
                    text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                    url=f"tg://resolve?domain=share&text={encoded_text}"
                )],
                [InlineKeyboardButton(
                    text="‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ" if city_status.get("visited") else "‚óè –ü–æ—Å–µ—â–µ–Ω–æ",
                    callback_data="to_visited"
                )],
                [InlineKeyboardButton(
                    text="üìå –í –∑–∞–∫–ª–∞–¥–∫–∞—Ö" if city_status.get("bookmarked") else "‚óè –í –∑–∞–∫–ª–∞–¥–∫–∏",
                    callback_data="to_bookmarks"
                )],
                
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤", callback_data=return_callback)],
            ]
        )
    return keyboard


my_routes = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ", callback_data="visited")],
                [InlineKeyboardButton(text="üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ", callback_data="bookmarks")],
                #[InlineKeyboardButton(text="üö´ –°–∫—Ä—ã—Ç—ã–µ", callback_data="hide")]
                             ]
        )


# –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
'''back_to_main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)


# –≤–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
back_to_search_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚Ü©Ô∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")]
    ],
    resize_keyboard=True
)'''



# –Ω–∞—Å–µ–ª–µ–Ω–∏–µ
def generate_population_keyboard(selected_range):
    population_ranges = {
        '15': '‚ö™Ô∏è 1000-5000',
        '515': '‚ö™Ô∏è 5000-15000',
        '1530': '‚ö™Ô∏è 15000-30000',
        '3050': '‚ö™Ô∏è 30000-50000',
        '50': '‚ö™Ô∏è –±–æ–ª–µ–µ 50000',
    }
    keyboard_builder = InlineKeyboardBuilder()
    for key, label in population_ranges.items():
        if key == selected_range:
            keyboard_builder.button(
                text=label.replace('‚ö™Ô∏è', 'üîò'),
                callback_data=key
            )
        else:
            keyboard_builder.button(
                text=label,
                callback_data=key
            )
    keyboard_builder.adjust(1)
    return keyboard_builder.as_markup()


# —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
radius_search = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–û—Ç", callback_data="set_radius_from"),
                InlineKeyboardButton(text="–î–æ", callback_data="set_radius_to")
            ]
        ]
    )