import asyncio
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F, Router, Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from src.modules.check_commands import check_menu_commands
from src.db.search_user_settings import get_search_radius, get_user_preferences, radius_from, radius_to, update_population_range
import src.modules.keyboards as kb
from config import menu_commands, radius_search_img, population_search_img


router = Router()


from aiogram.fsm.state import StatesGroup, State

class RadiusSettings(StatesGroup):
    waiting_for_from = State()
    waiting_for_to = State()


# –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞
@router.message(F.text == 'üåê –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞')
async def range_for_search(message: Message):
    user_tg_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞ –∏–∑ –ë–î
    radius = get_search_radius(user_tg_id)
    if radius:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞–¥–∏—É—Å—ã –∏–∑ –º–µ—Ç—Ä–æ–≤ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
        search_radius_from_km = (radius[0] or 0) // 1000
        search_radius_to_km = (radius[1] or 100000) // 1000  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 100 –∫–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    else:
        text = "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n–æ—Ç 0 –∫–º –¥–æ 100 –∫–º"

    await message.answer_photo(
                         photo=radius_search_img,
                         caption=(f"<b>‚òâ –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞:</b>\n\n"
                                      f"‚ü≤ –û—Ç: {search_radius_from_km} –∫–º\n"
                                      f"‚ü≥ –î–æ: {search_radius_to_km} –∫–º"),
                         parse_mode='HTML',
                         reply_markup=kb.radius_search)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç –∏ –¥–æ
@router.callback_query(F.data == "set_radius_from")
async def set_radius_from(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ (–∫–º):")
    await state.set_state(RadiusSettings.waiting_for_from)


@router.callback_query(F.data == "set_radius_to")
async def set_radius_to(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ (–∫–º):")
    await state.set_state(RadiusSettings.waiting_for_to)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(RadiusSettings.waiting_for_from, F.text.isdigit())
async def process_radius_from(message: Message, state: FSMContext):
    user_tg_id = message.from_user.id
    new_radius_from_km = int(message.text)
    new_radius_from_m = new_radius_from_km * 1000  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–µ—Ç—Ä—ã

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π
    radius = get_search_radius(user_tg_id)
    if radius:
        _, search_radius_to = radius
        if search_radius_to is not None and new_radius_from_m > search_radius_to:
            await message.answer(
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ ({search_radius_to // 1000} –∫–º). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=kb.main_menu
            )
            return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î
    await asyncio.to_thread(radius_from, user_tg_id, new_radius_from_m)

    await message.answer(
        text=f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {new_radius_from_km} –∫–º",
        reply_markup=kb.main_menu
    )
    await range_for_search(message)
    await state.clear()


@router.message(RadiusSettings.waiting_for_to, F.text.isdigit())
async def process_radius_to(message: Message, state: FSMContext):
    user_tg_id = message.from_user.id
    new_radius_to_km = int(message.text)
    new_radius_to_m = new_radius_to_km * 1000  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–µ—Ç—Ä—ã

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
    radius = get_search_radius(user_tg_id)
    if radius:
        search_radius_from, _ = radius
        if search_radius_from is not None and new_radius_to_m < search_radius_from:
            await message.answer(
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({search_radius_from // 1000} –∫–º). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=kb.main_menu
            )
            return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î
    await asyncio.to_thread(radius_to, user_tg_id, new_radius_to_m)

    await message.answer(
        text=f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {new_radius_to_km} –∫–º",
        reply_markup=kb.main_menu
    )
    await range_for_search(message)
    await state.clear()

  
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ
@router.message(RadiusSettings.waiting_for_from)
@router.message(RadiusSettings.waiting_for_to)
async def process_invalid_input(message: Message, state: FSMContext):

    if message.text in menu_commands:
        await check_menu_commands(message.text, message, state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return


# –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –Ω–∞—Å–µ–ª–µ–Ω–∏—è
@router.message(F.text == 'üë®‚Äçüë©‚Äçüë¶‚Äçüë¶ –ù–∞—Å–µ–ª–µ–Ω–∏–µ')
async def population_for_search(message: Message):
    
    user_tg_id = message.from_user.id
    user_preferences = get_user_preferences(user_tg_id)
    selected_range = user_preferences.get('population_range', '1')
    
    await message.answer_photo(
        photo=population_search_img,
        caption='<b>–ù–∞—Å–µ–ª–µ–Ω–∏–µ</b>',
        parse_mode='HTML',
        reply_markup=kb.generate_population_keyboard(selected_range)
    )


# –°—Ç–∞—Ç—É—Å—ã –∫–Ω–æ–ø–æ–∫ (üîò ‚Äî –≤—ã–±—Ä–∞–Ω–Ω–∞—è, ‚ö™Ô∏è ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ)
population_ranges = {
    '15': '‚ö™Ô∏è 1000-5000',
    '515': '‚ö™Ô∏è 5000-15000',
    '1530': '‚ö™Ô∏è 15000-30000',
    '3050': '‚ö™Ô∏è 30000-50000',
    '50': '‚ö™Ô∏è –æ—Ç 50000',
}

@router.callback_query(F.data.in_(population_ranges.keys()))
async def handle_population_callback(callback: CallbackQuery):
    user_tg_id = callback.from_user.id
    selected_range = callback.data

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    update_population_range(user_tg_id, selected_range)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_builder = InlineKeyboardBuilder()
    for key, label in population_ranges.items():
        if key == selected_range:
            # –û—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
            keyboard_builder.button(
                text=label.replace('‚ö™Ô∏è', 'üîò'),
                callback_data=key
            )
        else:
            # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard_builder.button(
                text=label,
                callback_data=key
            )
    keyboard_builder.adjust(1)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_reply_markup(
        reply_markup=keyboard_builder.as_markup()
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–ª–±—ç–∫–∞
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")