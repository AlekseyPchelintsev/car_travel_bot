import asyncio
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram import F, Router, Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from src.db.add_user import add_user
from src.db.get_city_details import get_city_details
from src.db.search_cities import get_cities_nearby_with_preferences
from src.db.update_user_location import update_user_location
from src.db.get_user_location import get_user_location
import src.modules.keyboards as kb


router = Router()


# –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤
@router.message(F.text == "üîé –ò—Å–∫–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã")
async def find_cities_with_preferences(message: Message):
    user_tg_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
    if message.location:
        user_latitude = message.location.latitude
        user_longitude = message.location.longitude

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await asyncio.to_thread(update_user_location, user_tg_id, user_latitude, user_longitude)
    else:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_location = get_user_location(user_tg_id)

        if not user_location:
            await message.answer(
                "–î–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π. –ù–∞–∂–º–∏—Ç–µ <b>'üîé –ò—Å–∫–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã'</b> –µ—â—ë —Ä–∞–∑, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é.",
                parse_mode='HTML',
                reply_markup=kb.main_menu
            )
            return

        user_latitude, user_longitude = user_location

    try:
        # –ò—â–µ–º –≥–æ—Ä–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        cities = get_cities_nearby_with_preferences(user_tg_id, user_longitude, user_latitude)

        if cities:
            await message.answer(
                "–í–æ—Ç –≥–æ—Ä–æ–¥–∞, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:",
                reply_markup=kb.generate_cities_keyboard(cities)
            )
        else:
            await message.answer(text=(
                "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º."
                "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å 'üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞'"))
    except ValueError as e:
        await message.answer(str(e))
                

# –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤
@router.callback_query(F.data == "back_to_list")
async def back_to_city_list(callback: CallbackQuery):
    user_tg_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_location = get_user_location(user_tg_id)

    if not user_location:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –ª–æ–∫–∞—Ü–∏–µ–π.")
        return

    user_latitude, user_longitude = user_location

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cities = get_cities_nearby_with_preferences(user_tg_id, user_longitude, user_latitude)

        if cities:
            await callback.message.edit_text("–í–æ—Ç –≥–æ—Ä–æ–¥–∞, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:", 
                                 reply_markup=kb.generate_cities_keyboard(cities))
        else:
            await callback.message.edit_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
    except ValueError as e:
        await callback.message.edit_text(str(e))
        

# –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–µ
@router.callback_query(F.data.startswith("city_"))
async def show_city_details(callback: CallbackQuery):
    city_id = int(callback.data.split("_")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ –∏–∑ –ë–î
    city_details = await asyncio.to_thread(get_city_details, city_id)

    if city_details:
        city_name, city_region, latitude, longitude, population = city_details
        response = (
            f"üìç –ì–æ—Ä–æ–¥: {city_name}\n"
            f"üåç –†–µ–≥–∏–æ–Ω: {city_region}\n"
            f"üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population}\n"
            f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}\n"
        )
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤
        
        await callback.message.edit_text(response, reply_markup=kb.back_to_cities_list)
    else:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)