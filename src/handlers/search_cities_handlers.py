import asyncio
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram import F, Router, Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from geopy.distance import geodesic
from src.handlers.my_routes import my_routes_menu, show_bookmarked_cities, show_visited_cities
from src.db.get_data_my_routes import toggle_bookmarks_db, toggle_visited_db, get_bookmarked_cities, get_visited_cities, is_city_bookmarked, is_city_visited
from src.db.get_city_details import get_city_details
from src.db.search_cities import get_cities_nearby_with_preferences
from src.db.get_user_location import get_user_location
import src.modules.keyboards as kb
from config import search_img, city_info


router = Router()


# –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤
@router.message(F.text == "üîé –ò—Å–∫–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã")
async def find_cities_with_preferences(message: Message, state: FSMContext):
    user_tg_id = message.from_user.id
    await state.update_data(current_menu_location="search_cities_menu")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_location = get_user_location(user_tg_id)
    if not user_location:
        await message.answer(
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üü¶ <b>'–ú–µ–Ω—é'</b>.",
            parse_mode="HTML",
            reply_markup=kb.main_menu,
        )
        return

    user_latitude, user_longitude = user_location
    try:
        cities = get_cities_nearby_with_preferences(user_tg_id, user_longitude, user_latitude)

        if cities:
            await state.update_data(current_section="search", cities=cities, current_page=1)
            await message.answer_photo(
                photo=search_img,
                caption="–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:",
                reply_markup=kb.generate_cities_keyboard_with_status(cities, page=1),
            )
        else:
            await message.answer(
                text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å <b>'üìç –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞'</b> –∏–ª–∏ <b>'üë®‚Äçüë©‚Äçüë¶‚Äçüë¶ –ù–∞—Å–µ–ª–µ–Ω–∏–µ'</b>.",
                parse_mode='HTML'
            )
    except ValueError as e:
        await message.answer(str(e))


# –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤
@router.callback_query(F.data == "return_to_list")
async def return_to_cities_list(callback: CallbackQuery, state: FSMContext):

    user_tg_id = callback.from_user.id
    user_location = get_user_location(user_tg_id)
    user_latitude, user_longitude = user_location

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    current_section = data.get("current_section", "search")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—â–∏–π –ø–æ–∏—Å–∫
    build_location = ''

    if current_section == 'search':
        cities = await asyncio.to_thread(get_cities_nearby_with_preferences, user_tg_id, user_longitude, user_latitude)
    elif current_section == 'visited':
        empty_list = 1
        cities = await asyncio.to_thread(get_visited_cities, user_tg_id, user_longitude, user_latitude)
        build_location = 'my_routes'
    elif current_section == 'bookmarked':
        empty_list = 2
        cities = await asyncio.to_thread(get_bookmarked_cities, user_tg_id, user_longitude, user_latitude)
        build_location = 'my_routes'
        '''
    elif current_section == 'hidden':
        empty_list = 3
        cities = await asyncio.to_thread(get_hidden_cities, user_tg_id, user_longitude, user_latitude)
        build_location = 'my_routes'
        '''    
    else:
        cities = data.get('cities', [])

    page = data.get("current_page", 1)

    if not cities and build_location == 'my_routes':
        if empty_list == 1:
            await callback.answer(text='–°–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –ø—É—Å—Ç', show_alert=True)
        if empty_list == 2:
            await callback.answer(text='–°–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –ø—É—Å—Ç', show_alert=True)
        '''
        if empty_list == 3:
            await callback.answer(text='–°–ø–∏—Å–æ–∫ —Å–∫—Ä—ã—Ç—ã—Ö –ª–æ–∫–∞—Ü–∏–π –ø—É—Å—Ç', show_alert=True)
        '''
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=search_img,
                caption='<b>–ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã:</b>',
                parse_mode='HTML'
            ),
            reply_markup=kb.my_routes
        )
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
    section_headers = {
        "visited": "‚úÖ <b>–ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:</b>",
        "bookmarked": "üìå <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:</b>",
        #"hidden": "üö´ <b>–°–∫—Ä—ã—Ç—ã–µ –ª–æ–∫–∞—Ü–∏–∏:</b>",
    }

    header_text = section_headers.get(current_section, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:")
        

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = kb.generate_cities_keyboard_with_status(cities, page=page, build_location=build_location)
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=search_img,
        caption=header_text,
        parse_mode="HTML"
        ),
        reply_markup=keyboard,
        
    )


@router.callback_query(F.data.startswith("city_"))
async def show_city_details(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–æ—Ä–æ–¥–∞.
    :param callback: CallbackQuery
    :param state: FSMContext
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        data_parts = callback.data.split("_")
        city_id = int(data_parts[1])  # ID –≥–æ—Ä–æ–¥–∞
        page = int(data_parts[3])  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –ø–µ—Ä–µ—à–ª–∏
        data = await state.get_data()
        current_section = data.get('current_section')


        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ ID –≥–æ—Ä–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(return_page=page, current_city_id=city_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ
        city_details = await asyncio.to_thread(get_city_details, city_id)
        if not city_details:
            await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        city_name, latitude, longitude, population = city_details

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tg_id = callback.from_user.id
        user_location = await asyncio.to_thread(get_user_location, user_tg_id)
        if not user_location:
            await callback.answer("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        user_latitude, user_longitude = user_location

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        distance_km = geodesic((user_latitude, user_longitude), (latitude, longitude)).kilometers
        distance_km = round(distance_km, 1)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≥–æ—Ä–æ–¥–∞ (–ø–æ—Å–µ—â—ë–Ω, —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Å–∫—Ä—ã—Ç)
        city_status = {
            "visited": await asyncio.to_thread(is_city_visited, user_tg_id, city_id),
            "bookmarked": await asyncio.to_thread(is_city_bookmarked, user_tg_id, city_id),
            #"hidden": await asyncio.to_thread(is_city_hidden, user_tg_id, city_id),
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ä–æ–¥–∞ –∏ –µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(city_status=city_status, latitude=latitude, longitude=longitude)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = (
            f"ü™ß <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {city_name}\n"
            f"üë• <b>–ù–∞—Å–µ–ª–µ–Ω–∏–µ:</b> ~ {population}\n"
            f"üìè <b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> ~ {distance_km} –∫–º\n\n"
            "(—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ, –±–µ–∑ —É—á–µ—Ç–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ä–µ–ª—å–µ—Ñ–∞ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞)"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –≥–æ—Ä–æ–¥–∞
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=city_info,
            caption=response,
            parse_mode='HTML'
            ),
            reply_markup=kb.back_to_cities_list(latitude, longitude, city_status, current_section=current_section)
        )

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ show_city_details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)



# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –ø–æ—Å–µ—â–µ–Ω–∏—è –∏ —Å–∫—Ä—ã—Ç–∏—è –≥–æ—Ä–æ–¥–∞
@router.callback_query(F.data == "to_visited")
async def add_to_visited(callback: CallbackQuery, state: FSMContext):
    user_tg_id = callback.from_user.id
    data = await state.get_data()
    city_id = data.get("current_city_id")
    current_section = data.get('current_section')

    if not city_id:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é.")
        return

    user_location = await asyncio.to_thread(get_user_location, user_tg_id)
    if not user_location:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_latitude, user_longitude = user_location

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await asyncio.to_thread(toggle_visited_db, user_tg_id, city_id)
    is_visited = await asyncio.to_thread(is_city_visited, user_tg_id, city_id)
    visited_list = await asyncio.to_thread(get_visited_cities, user_tg_id, user_longitude, user_latitude)

    city_details = await asyncio.to_thread(get_city_details, city_id)
    if not city_details:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    city_name, latitude, longitude, population = city_details

    # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ"
    if not is_visited and current_section == 'visited':

        if visited_list:
            await callback.answer(
                text="–õ–æ–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö",
                )
            await show_visited_cities(callback, state)
            return
        else:
            await callback.answer(
                text="–°–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –ø—É—Å—Ç.",
                show_alert=True
                )
            await my_routes_menu(callback.message)
            return
        
            
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.answer(
        "–õ–æ–∫–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö" if is_visited else "–õ–æ–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ä–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    city_status = data.get("city_status", {"visited": False, "bookmarked": False})  # "hidden": False
    city_status["visited"] = is_visited
    await state.update_data(city_status=city_status)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=kb.back_to_cities_list(
            latitude, longitude, city_status, current_section=current_section
        )
    )


@router.callback_query(F.data == "to_bookmarks")
async def add_to_bookmarks(callback: CallbackQuery, state: FSMContext):
    user_tg_id = callback.from_user.id
    data = await state.get_data()
    city_id = data.get("current_city_id")
    current_section = data.get('current_section')

    if not city_id:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é.")
        return

    user_location = await asyncio.to_thread(get_user_location, user_tg_id)
    if not user_location:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_latitude, user_longitude = user_location

    city_details = await asyncio.to_thread(get_city_details, city_id)
    if not city_details:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    city_name, latitude, longitude, population = city_details

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await asyncio.to_thread(toggle_bookmarks_db, user_tg_id, city_id)
    is_bookmarked = await asyncio.to_thread(is_city_bookmarked, user_tg_id, city_id)
    bookmarked_list = await asyncio.to_thread(get_bookmarked_cities, user_tg_id, user_longitude, user_latitude)

    # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ"
    if not is_bookmarked and current_section == 'bookmarked':

        if bookmarked_list:
            await callback.answer(
                text="–õ–æ–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫",
                )
            await show_bookmarked_cities(callback, state)
            return
        else:
            await callback.answer(
                text="–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –ø—É—Å—Ç.",
                show_alert=True
                )
            await my_routes_menu(callback.message)
            return


    await callback.answer(
    "–õ–æ–∫–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∏" if is_bookmarked else "–õ–æ–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ä–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    city_status = data.get("city_status", {"visited": False, "bookmarked": False}) #"hidden": False
    city_status["bookmarked"] = is_bookmarked
    await state.update_data(city_status=city_status)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(reply_markup=kb.back_to_cities_list(latitude, longitude, city_status, current_section=current_section))


'''
@router.callback_query(F.data == "to_hide")
async def add_to_hidden(callback: CallbackQuery, state: FSMContext):
    user_tg_id = callback.from_user.id
    data = await state.get_data()
    city_id = data.get("current_city_id")
    current_section = data.get('current_section')

    if not city_id:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é.")
        return

    user_location = await asyncio.to_thread(get_user_location, user_tg_id)
    if not user_location:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_latitude, user_longitude = user_location

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await asyncio.to_thread(toggle_hidden_db, user_tg_id, city_id)
    is_hidden = await asyncio.to_thread(is_city_hidden, user_tg_id, city_id)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.answer(
        "–õ–æ–∫–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞!" if is_hidden else "–õ–æ–∫–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –ø–æ–∏—Å–∫!"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ä–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    city_status = data.get("city_status", {"visited": False, "bookmarked": False}) #"hidden": False
    city_status["hidden"] = is_hidden
    await state.update_data(city_status=city_status)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(reply_markup=kb.back_to_cities_list(user_latitude, user_longitude, city_status, current_section=current_section))
'''


# –ü–ê–ì–ò–ù–ê–¶–ò–Ø
@router.callback_query(F.data.startswith("page_"))
async def paginate_cities(callback_query: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback_query.data.split("_")[1])
    data = await state.get_data()
    cities = data.get("cities", [])

    if not cities:
        await callback_query.answer("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_page=page)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await callback_query.message.edit_reply_markup(reply_markup=kb.generate_cities_keyboard_with_status(cities, page=page))